//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebFilm2015.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FilmDB1Entities : DbContext
    {
        public FilmDB1Entities()
            : base("name=FilmDB1Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Episode> Episodes { get; set; }
        public virtual DbSet<Film> Films { get; set; }
        public virtual DbSet<History> Histories { get; set; }
        public virtual DbSet<Season> Seasons { get; set; }
        public virtual DbSet<Type> Types { get; set; }
        public virtual DbSet<View_History> View_History { get; set; }
    
        public virtual int AddCountry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCountry");
        }
    
        public virtual int AddEpisode()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEpisode");
        }
    
        public virtual ObjectResult<GetCountries_Result> GetCountries()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCountries_Result>("GetCountries");
        }
    
        public virtual ObjectResult<GetFilms_Result> GetFilms(string fname, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> typeID, Nullable<int> userID)
        {
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFilms_Result>("GetFilms", fnameParameter, startDateParameter, endDateParameter, typeIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetHistory_Result> GetHistory(Nullable<int> filmID)
        {
            var filmIDParameter = filmID.HasValue ?
                new ObjectParameter("FilmID", filmID) :
                new ObjectParameter("FilmID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHistory_Result>("GetHistory", filmIDParameter);
        }
    
        public virtual ObjectResult<HistoryReport_Result> HistoryReport(Nullable<System.DateTime> start_date, Nullable<System.DateTime> end_date)
        {
            var start_dateParameter = start_date.HasValue ?
                new ObjectParameter("start_date", start_date) :
                new ObjectParameter("start_date", typeof(System.DateTime));
    
            var end_dateParameter = end_date.HasValue ?
                new ObjectParameter("end_date", end_date) :
                new ObjectParameter("end_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HistoryReport_Result>("HistoryReport", start_dateParameter, end_dateParameter);
        }
    
        public virtual int UpdateCountry(Nullable<int> countryId, string cname, string cname_full, string code)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            var cnameParameter = cname != null ?
                new ObjectParameter("Cname", cname) :
                new ObjectParameter("Cname", typeof(string));
    
            var cname_fullParameter = cname_full != null ?
                new ObjectParameter("Cname_full", cname_full) :
                new ObjectParameter("Cname_full", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCountry", countryIdParameter, cnameParameter, cname_fullParameter, codeParameter);
        }
    
        public virtual int UpdateEpisodeId(Nullable<int> episodeID)
        {
            var episodeIDParameter = episodeID.HasValue ?
                new ObjectParameter("EpisodeID", episodeID) :
                new ObjectParameter("EpisodeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEpisodeId", episodeIDParameter);
        }
    
        public virtual int UpdateFilm(Nullable<int> film_id, string fname, string fname_eng, Nullable<int> type_id, Nullable<int> country_id, Nullable<short> year, Nullable<int> season_id, Nullable<int> episode_id, Nullable<int> user_id, string description, ObjectParameter newFilmID)
        {
            var film_idParameter = film_id.HasValue ?
                new ObjectParameter("film_id", film_id) :
                new ObjectParameter("film_id", typeof(int));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var fname_engParameter = fname_eng != null ?
                new ObjectParameter("fname_eng", fname_eng) :
                new ObjectParameter("fname_eng", typeof(string));
    
            var type_idParameter = type_id.HasValue ?
                new ObjectParameter("type_id", type_id) :
                new ObjectParameter("type_id", typeof(int));
    
            var country_idParameter = country_id.HasValue ?
                new ObjectParameter("country_id", country_id) :
                new ObjectParameter("country_id", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(short));
    
            var season_idParameter = season_id.HasValue ?
                new ObjectParameter("season_id", season_id) :
                new ObjectParameter("season_id", typeof(int));
    
            var episode_idParameter = episode_id.HasValue ?
                new ObjectParameter("episode_id", episode_id) :
                new ObjectParameter("episode_id", typeof(int));
    
            var user_idParameter = user_id.HasValue ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFilm", film_idParameter, fnameParameter, fname_engParameter, type_idParameter, country_idParameter, yearParameter, season_idParameter, episode_idParameter, user_idParameter, descriptionParameter, newFilmID);
        }
    
        public virtual int UpdateFilmId(Nullable<int> filmID)
        {
            var filmIDParameter = filmID.HasValue ?
                new ObjectParameter("FilmID", filmID) :
                new ObjectParameter("FilmID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFilmId", filmIDParameter);
        }
    
        public virtual int UpdateHistoryId(Nullable<int> historyID)
        {
            var historyIDParameter = historyID.HasValue ?
                new ObjectParameter("HistoryID", historyID) :
                new ObjectParameter("HistoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateHistoryId", historyIDParameter);
        }
    
        public virtual int UpdateTypeId(Nullable<int> typeID)
        {
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTypeId", typeIDParameter);
        }
    }
}
